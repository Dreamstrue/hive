#设置log4j的日志输出等级，并将日志输出到 stdout和R两个目的地；
#log4j的日志输出等级有以下几种：
#1.OFF表示不输出任何信息，关闭所有日志的输出；
#2.FATAL表示
#3.ERROR表示只输出错误的日志
#4.WARN表示输出警告和错误的日志
#5.INFO表示输出信息，警告和错误的日志
#6.DEBUG表示输出调试，信息，警告和错误的日志
#7.ALL表示打印所有的日志；
#Log4j建议只使用四个级别，优先级从高到低分别是ERROR>WARN>INFO>DEBUG,值为INFO时表示所有优先级大于等于INFO的日志都进行处理；
#如果以下配置修改为log4j.rootLogger = INFO,stdout,R那么将表示只对INFO级别的日志进行处理
log4j.rootCategory=INFO,stdout,R
#设置stdout输出端的类型
#输出端类型有以下几种：
#1.org.apache.log4j.ConsoleAppender（控制台）;
#2.org.apache.log4j.FileAppender（文件）;
#3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）;
#4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件，可通过 log4j.appender.R.MaxFileSize=100KB设置文件大小，还可通过 log4j.appender.R.MaxBackupIndex=1设置为保存一个备份文件。）;
#5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）;
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#设置stdout输出端布局(layout)的类型
#输出端布局类型有以下几种：
#1.org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#2.org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#3.org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#4.org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#如果stdout输出端布局选择PatternLayout类型的话，需要对打印信息（输出）格式进行设置
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为“ rn”，Unix平台为“n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{ yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
# [QC]是log信息的开头，可以为任意字符，一般为项目简称。
# 输出的信息的格式如下：
#[TS] DEBUG [main] AbstractBeanFactory.getBean(189) | Returning cached instance of singleton bean 'MyAutoProxy'
log4j.appender.stdout.layout.ConversionPattern= [QC] %p [%t] %C.%M(%L) | %m%n
#设置R输出端的类型
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
#设置R输出端输出文件的路径
log4j.appender.R.File=E://workSpaces//hive//log//hive
#设置R输出端文件的日期后缀格式
log4j.appender.R.DatePattern='_'yyyy-MM-dd'.log'
#设置R输出文件的Append参数：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
log4j.appender.R.Append=true
#设置R输出端的布局
log4j.appender.R.layout=org.apache.log4j.PatternLayout
#设置R输出端打印信息（输出）格式
log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n
#设置输出日志文件编码（可以控制乱码情况）
log4j.appender.R.encoding=UTF-8
#Project defalult level 
#log4j.logger.com.guangfan.zxt=DEBUG

# General Apache libraries
#log4j.logger.org.apache=All

# Spring
#log4j.logger.org.springframework.web.servlet=ERROR

# Hibernate
#log4j.logger.org.hibernate=All

